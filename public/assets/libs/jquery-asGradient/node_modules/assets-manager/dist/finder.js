'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _globby = require('globby');

var _globby2 = _interopRequireDefault(_globby);

var _types = require('./types');

var _types2 = _interopRequireDefault(_types);

var _minimatch = require('minimatch');

var _minimatch2 = _interopRequireDefault(_minimatch);

var _deepExtend = require('deep-extend');

var _deepExtend2 = _interopRequireDefault(_deepExtend);

var _configure = require('./configure');

var _configure2 = _interopRequireDefault(_configure);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Finder
 */
var Finder = function () {
  function Finder() {
    _classCallCheck(this, Finder);
  }

  _createClass(Finder, [{
    key: 'classifyFilesFromGlobs',
    value: function classifyFilesFromGlobs(dir, globs, types) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      if (!types) {
        types = _configure2.default.get('types', _types2.default);
      }
      var result = {};

      var files = this.listFiles(dir, globs, options);

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Object.keys(types)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var type = _step.value;

          options = (0, _deepExtend2.default)({
            matchBase: true
          }, options);
          result[type] = files.filter(_minimatch2.default.filter(types[type], options));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    }
  }, {
    key: 'classifyFilesFromDir',
    value: function classifyFilesFromDir(dir, types) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (!types) {
        types = _configure2.default.get('types', _types2.default);
      }

      var result = {};

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Object.keys(types)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var type = _step2.value;

          result[type] = this.filterFilesByType(dir, type, types, options);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return result;
    }
  }, {
    key: 'classifyFiles',
    value: function classifyFiles(files, types) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (!types) {
        types = _configure2.default.get('types', _types2.default);
      }

      var result = {};

      if (!Array.isArray(files)) {
        files = [files];
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = Object.keys(types)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var type = _step3.value;

          options = (0, _deepExtend2.default)({
            matchBase: true
          }, options);
          result[type] = files.filter(_minimatch2.default.filter(types[type], options));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return result;
    }
  }, {
    key: 'listFiles',
    value: function listFiles(dir) {
      var glob = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '**/*';
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options = (0, _deepExtend2.default)({
        dot: true,
        ignore: ['.*', 'bower_components', 'node_modules']
      }, options);

      return this.filterFiles(dir, glob, options);
    }
  }, {
    key: 'filterFiles',
    value: function filterFiles(dir, filter) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options = Object.assign({
        cwd: dir,
        nodir: true
      }, options);

      return _globby2.default.sync(filter, options);
    }
  }, {
    key: 'filterFilesByType',
    value: function filterFilesByType(dir, type, types) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      if (!types) {
        types = _configure2.default.get('types', _types2.default);
      }

      options = (0, _deepExtend2.default)({
        matchBase: true
      }, options);

      return this.filterFiles(dir, types[type], options);
    }
  }]);

  return Finder;
}();

var finder = new Finder();
exports.default = finder;
module.exports = exports['default'];