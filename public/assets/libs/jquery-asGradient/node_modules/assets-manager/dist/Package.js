'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Bower = require('./Registry/Bower');

var _Bower2 = _interopRequireDefault(_Bower);

var _Npm = require('./Registry/Npm');

var _Npm2 = _interopRequireDefault(_Npm);

var _Custom = require('./Registry/Custom');

var _Custom2 = _interopRequireDefault(_Custom);

var _configure = require('./configure');

var _configure2 = _interopRequireDefault(_configure);

var _file2 = require('./file');

var _file3 = _interopRequireDefault(_file2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _isPlainObject = require('is-plain-object');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Package = function () {
  function Package(name, defination) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Package);

    this.name = name;
    this.defination = defination;
    this.options = Object.assign({
      package: null,
      flattenPackages: _configure2.default.get('flattenPackages', true),
      flattenTypes: _configure2.default.get('flattenTypes', false),
      flatten: _configure2.default.get('flatten', false),
      override: _configure2.default.get('override', true),
      registry: _configure2.default.get('defaultRegistry', 'npm'),
      renames: {},
      replaces: {},
      dest: _configure2.default.get('dest', 'assets'),
      path: _configure2.default.get('path', '${dest}/${type}/${package}/${file}')
    }, options);

    switch (this.options.registry) {
      case 'bower':
        this.registry = new _Bower2.default();
        break;
      case 'npm':
        this.registry = new _Npm2.default();
        break;
      default:
        this.registry = new _Custom2.default(this.options.registry);
        break;
    }

    this.path = this.registry.getPackagePath(this.name);
    this.globs = {};
  }

  _createClass(Package, [{
    key: 'isInstalled',
    value: function isInstalled() {
      return _file3.default.isDirectory(this.path, {
        cwd: _configure2.default.get('cwd', process.cwd())
      });
    }
  }, {
    key: 'hasDirectory',
    value: function hasDirectory(directory) {
      return _file3.default.isDirectory(_path2.default.join(this.path, directory), {
        cwd: _configure2.default.get('cwd', process.cwd())
      });
    }
  }, {
    key: 'getDests',
    value: function getDests() {
      if (this.dests) {
        return this.dests;
      }

      var dests = _util2.default.parseOptions(this.options, 'dest');
      this.dests = Object.assign(this.options.dests || {}, dests);

      return this.dests;
    }
  }, {
    key: 'getPaths',
    value: function getPaths() {
      if (this.paths) {
        return this.paths;
      }

      var paths = _util2.default.parseOptions(this.options, 'path');
      this.paths = Object.assign(this.options.paths || {}, paths);

      return this.paths;
    }
  }, {
    key: 'getMainFiles',
    value: function getMainFiles() {
      this.mainFiles = this.registry.getPackageMainFiles(this.name);
      return this.mainFiles;
    }
  }, {
    key: 'getFilesByType',
    value: function getFilesByType(type) {
      if (type in this.getTypedFiles()) {
        return this.typedFiles[type];
      }
      return [];
    }
  }, {
    key: 'getFiles',
    value: function getFiles() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this.files) {
        return this.files;
      }
      this.files = this.registry.getPackageFiles(this.name, options);
      return this.files;
    }
  }, {
    key: 'getTypedFiles',
    value: function getTypedFiles() {
      if (this.typedFiles) {
        return this.typedFiles;
      }
      var defination = this.defination;

      if (defination === true) {
        this.typedFiles = this.registry.getPackageTypedFiles(this.name, {
          main: true
        });
      } else if (typeof defination === 'string' || Array.isArray(defination)) {
        var globs = this.getGlobsFromDefination(defination);

        this.typedFiles = this.registry.getPackageTypedFiles(this.name, {
          main: false,
          globs: globs
        });
      } else if ((0, _isPlainObject2.default)(defination)) {
        var types = {};

        for (var type in defination) {
          types[type] = this.getGlobsFromDefination(defination[type]);

          if ((0, _isPlainObject2.default)(types[type])) {
            types[type] = [];

            for (var _file in defination[type]) {
              types[type].push(defination[type][_file]);

              this.options.renames[_path2.default.basename(defination[type][_file])] = _file;
            }
          }
        }

        this.typedFiles = this.registry.getPackageTypedFiles(this.name, {
          types: types,
          main: false
        });
      }

      return this.typedFiles;
    }
  }, {
    key: 'getGlobsFromDefination',
    value: function getGlobsFromDefination(defination) {
      if (typeof defination === 'string' && this.hasDirectory(defination)) {
        return defination + '/**/*';
      }
      return defination;
    }
  }, {
    key: 'getGlobByType',
    value: function getGlobByType(type) {
      if (typeof this.globs[type] === 'undefined') {
        var glob = '.';
        var defination = this.defination;

        if (defination === true) {
          glob = '.';
        } else if (typeof defination === 'string' || Array.isArray(defination)) {
          glob = this.getGlobsFromDefination(defination);
        } else if ((0, _isPlainObject2.default)(defination)) {
          if (type in defination) {
            glob = this.getGlobsFromDefination(defination[type]);

            if ((0, _isPlainObject2.default)(glob)) {
              glob = '.';
            }
          } else {
            glob = '.';
          }
        }

        this.globs[type] = glob;
      }

      return this.globs[type];
    }
  }, {
    key: 'getPath',
    value: function getPath() {
      return this.registry.getPackagePath(this.name);
    }
  }, {
    key: 'getInfo',
    value: function getInfo(key) {
      return this.registry.getPackageInfo(this.name, key);
    }
  }, {
    key: 'getInstallCmd',
    value: function getInstallCmd() {
      return this.registry.getPackageInstallCmd(this.name);
    }
  }]);

  return Package;
}();

exports.default = Package;
module.exports = exports['default'];