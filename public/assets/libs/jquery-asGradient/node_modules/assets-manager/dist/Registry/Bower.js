'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Registry2 = require('../Registry');

var _Registry3 = _interopRequireDefault(_Registry2);

var _bowerConfig = require('bower-config');

var _bowerConfig2 = _interopRequireDefault(_bowerConfig);

var _untildify = require('untildify');

var _untildify2 = _interopRequireDefault(_untildify);

var _file = require('../file');

var _file2 = _interopRequireDefault(_file);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Bower = function (_Registry) {
  _inherits(Bower, _Registry);

  function Bower() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Bower);

    var _this = _possibleConstructorReturn(this, (Bower.__proto__ || Object.getPrototypeOf(Bower)).call(this, options));

    Object.assign(_this.options, {
      json: 'bower.json',
      overrides: {},
      componentJson: '.bower.json'
    }, options);

    if (!_this.options.dir) {
      var bowerrc = new _bowerConfig2.default(_this.options.cwd).load().toObject();
      _this.options.cwd = (0, _untildify2.default)(bowerrc.cwd);
      _this.options.dir = (0, _untildify2.default)(bowerrc.directory);
    }
    return _this;
  }

  _createClass(Bower, [{
    key: 'getPackageInfo',
    value: function getPackageInfo(packageName, key) {
      var infoPath = _path2.default.join(this.getRelativePackagePath(packageName), this.options.componentJson);
      if (!_file2.default.exists(infoPath)) {
        infoPath = _path2.default.join(this.getRelativePackagePath(packageName), this.options.json);
      }

      var info = {};

      if (_file2.default.exists(infoPath)) {
        info = _file2.default.readJSON(infoPath);
      }

      if (typeof key !== 'undefined') {
        if (Object.hasOwnProperty.call(info, key)) {
          return info[key];
        }
        return undefined;
      }
      return info;
    }
  }, {
    key: 'getPackageInstallCmd',
    value: function getPackageInstallCmd(packageName) {
      return '\'bower install ' + packageName + ' --save\'';
    }
  }]);

  return Bower;
}(_Registry3.default);

exports.default = Bower;
module.exports = exports['default'];