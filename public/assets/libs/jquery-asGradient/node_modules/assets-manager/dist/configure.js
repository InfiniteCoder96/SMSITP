'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Singleton2 = require('./Singleton');

var _Singleton3 = _interopRequireDefault(_Singleton2);

var _dotProp = require('dot-prop');

var _dotProp2 = _interopRequireDefault(_dotProp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* It get inspriation from yeoman/configstore */
var Configure = function (_Singleton) {
  _inherits(Configure, _Singleton);

  function Configure() {
    _classCallCheck(this, Configure);

    var _this = _possibleConstructorReturn(this, (Configure.__proto__ || Object.getPrototypeOf(Configure)).call(this));

    _this.values = {};
    return _this;
  }

  _createClass(Configure, [{
    key: 'get',
    value: function get(key, defaultValue) {
      if (this.has(key)) {
        return _dotProp2.default.get(this.values, key);
      }
      return defaultValue;
    }
  }, {
    key: 'set',
    value: function set(key, val) {
      var values = this.values;
      if (arguments.length === 1) {
        Object.keys(key).forEach(function (k) {
          _dotProp2.default.set(this.values, k, key[k]);
        }.bind(this));
      } else {
        _dotProp2.default.set(this.values, key, val);
      }
      this.values = values;
    }
  }, {
    key: 'has',
    value: function has(key) {
      return _dotProp2.default.has(this.values, key);
    }
  }, {
    key: 'delete',
    value: function _delete(key) {
      var values = this.values;
      _dotProp2.default.delete(values, key);
      this.values = values;
    }
  }, {
    key: 'all',
    value: function all(values) {
      if ((typeof values === 'undefined' ? 'undefined' : _typeof(values)) === 'object') {
        this.values = values;
      } else {
        return this.values;
      }
    }
  }, {
    key: 'size',
    value: function size() {
      return Object.keys(this.values).length;
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.values = {};
      return true;
    }
  }]);

  return Configure;
}(_Singleton3.default);

var configure = new Configure();
exports.default = configure;
module.exports = exports['default'];