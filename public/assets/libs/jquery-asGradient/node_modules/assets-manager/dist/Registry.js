'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _finder = require('./finder');

var _finder2 = _interopRequireDefault(_finder);

var _configure = require('./configure');

var _configure2 = _interopRequireDefault(_configure);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Registry
 */
var Registry = function () {
  function Registry() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Registry);

    this.options = Object.assign({
      cwd: _configure2.default.get('cwd', process.cwd()),
      dir: null
    }, options);

    (0, _assert2.default)(_path2.default.isAbsolute(this.options.cwd || ''), 'options.cwd must be an absolute path');

    this.relative = _path2.default.relative(process.cwd(), this.options.cwd);
  }

  _createClass(Registry, [{
    key: 'getPackageMainFiles',
    value: function getPackageMainFiles(packageName) {
      var info = this.getPackageInfo(packageName);

      if (info && info.main) {
        if (typeof info.main === 'string') {
          return [info.main];
        }
        return info.main;
      }

      return [];
    }
  }, {
    key: 'getPackageFiles',
    value: function getPackageFiles(packageName) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return _finder2.default.listFiles(this.getRelativePackagePath(packageName), '**/*', options);
    }
  }, {
    key: 'getPackageTypedFiles',
    value: function getPackageTypedFiles(packageName) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      options = Object.assign({
        main: false,
        globs: null,
        types: _configure2.default.get('types')
      }, options);

      var main = options.main;
      var types = options.types;
      var globs = options.globs;

      delete options.main;
      delete options.types;
      delete options.glob;

      var dir = this.getRelativePackagePath(packageName);

      if (main === true) {
        var files = this.getPackageMainFiles(packageName);

        return _finder2.default.classifyFiles(files, types, options);
      }

      if (globs) {
        if (!Array.isArray(globs)) {
          globs = [globs];
        }
        return _finder2.default.classifyFilesFromGlobs(dir, globs, types, options);
      }

      return _finder2.default.classifyFilesFromDir(dir, types, options);
    }
  }, {
    key: 'getPackagePath',
    value: function getPackagePath(packageName) {
      return _path2.default.join(this.options.dir, packageName);
    }
  }, {
    key: 'getRelativePackagePath',
    value: function getRelativePackagePath(packageName) {
      return _path2.default.join(this.relative, this.options.dir, packageName);
    }
  }]);

  return Registry;
}();

exports.default = Registry;
module.exports = exports['default'];